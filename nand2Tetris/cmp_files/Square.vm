	// // This file is part of www.nand2tetris.org
	// // and the book "The Elements of Computing Systems"
	// // by Nisan and Schocken, MIT Press.
	// // File name: projects/09/Square/Square.jack
	// 
	// /**
	//  * Implements a graphic square. A graphic square has a screen location
	//  * and a size. It also has methods for drawing, erasing, moving on the 
	//  * screen, and changing its size.
	//  */
	// class Square {
	// 
	//     // Location on the screen
	//     field int x, y;
	// 
	//     // The size of the square
	//     field int size;
	// 
	//     /** Constructs a new square with a given location and size. */
	//     constructor Square new(int Ax, int Ay, int Asize) {
	//         let x = Ax;
function Square.new 0 // Returns Square
push constant 3
call Memory.alloc 1
pop pointer 0
push argument 0 // ARG Ax
pop this 0 // FIELD x
	//         let y = Ay;
push argument 1 // ARG Ay
pop this 1 // FIELD y
	//         let size = Asize;
push argument 2 // ARG Asize
pop this 2 // FIELD size
	// 
	//         do draw();
pop temp 0
	// 
	//         return this;
push pointer 0
return
	//     }
	// 
	//     /** Deallocates the object's memory. */
	//     method void dispose() {
	//         do Memory.deAlloc(this);
function Square.dispose 0 // Returns void
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
	//         return;
push constant 0
return
	//     }
	// 
	//     /** Draws the square on the screen. */
	//     method void draw() {
	//         do Screen.setColor(true);
function Square.draw 0 // Returns void
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
	//         do Screen.drawRectangle(x, y, x + size, y + size);
push this 0 // FIELD x
push this 1 // FIELD y
push this 0 // FIELD x
push this 2 // FIELD size
add
push this 1 // FIELD y
push this 2 // FIELD size
add
call Screen.drawRectangle 4
pop temp 0
	//         return;
push constant 0
return
	//     }
	// 
	//     /** Erases the square from the screen. */
	//     method void erase() {
	//         do Screen.setColor(false);
function Square.erase 0 // Returns void
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
	//         do Screen.drawRectangle(x, y, x + size, y + size);
push this 0 // FIELD x
push this 1 // FIELD y
push this 0 // FIELD x
push this 2 // FIELD size
add
push this 1 // FIELD y
push this 2 // FIELD size
add
call Screen.drawRectangle 4
pop temp 0
	//         return;
push constant 0
return
	//     }
	// 
	//     /** Increments the size by 2 pixels. */
	//     method void incSize() {
	//         if (((y + size) < 254) & ((x + size) < 510)) {
function Square.incSize 0 // Returns void
push argument 0
pop pointer 0
push this 1 // FIELD y
push this 2 // FIELD size
add
push constant 254
lt
push this 0 // FIELD x
push this 2 // FIELD size
add
push constant 510
lt
and
	//             do erase();
if-goto $IF_TRUE0
goto $IF_FALSE1
label $IF_TRUE0
pop temp 0
	//             let size = size + 2;
push this 2 // FIELD size
push constant 2
add
pop this 2 // FIELD size
	//             do draw();
pop temp 0
	//         }
	//         return;
label $IF_FALSE1
push constant 0
return
	//     }
	// 
	//     /** Decrements the size by 2 pixels. */
	//     method void decSize() {
	//         if (size > 2) {
function Square.decSize 0 // Returns void
push argument 0
pop pointer 0
push this 2 // FIELD size
push constant 2
gt
	//             do erase();
if-goto $IF_TRUE2
goto $IF_FALSE3
label $IF_TRUE2
pop temp 0
	//             let size = size - 2;
push this 2 // FIELD size
push constant 2
sub
pop this 2 // FIELD size
	//             do draw();
pop temp 0
	//         }
	//         return;
label $IF_FALSE3
push constant 0
return
	// 	}
	// 
	//     /** Moves up by 2 pixels. */
	//     method void moveUp() {
	//         if (y > 1) {
function Square.moveUp 0 // Returns void
push argument 0
pop pointer 0
push this 1 // FIELD y
push constant 1
gt
	//             do Screen.setColor(false);
if-goto $IF_TRUE4
goto $IF_FALSE5
label $IF_TRUE4
push constant 0
call Screen.setColor 1
pop temp 0
	//             do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
push this 0 // FIELD x
push this 1 // FIELD y
push this 2 // FIELD size
add
push constant 1
sub
push this 0 // FIELD x
push this 2 // FIELD size
add
push this 1 // FIELD y
push this 2 // FIELD size
add
call Screen.drawRectangle 4
pop temp 0
	//             let y = y - 2;
push this 1 // FIELD y
push constant 2
sub
pop this 1 // FIELD y
	//             do Screen.setColor(true);
push constant 0
not
call Screen.setColor 1
pop temp 0
	//             do Screen.drawRectangle(x, y, x + size, y + 1);
push this 0 // FIELD x
push this 1 // FIELD y
push this 0 // FIELD x
push this 2 // FIELD size
add
push this 1 // FIELD y
push constant 1
add
call Screen.drawRectangle 4
pop temp 0
	//         }
	//         return;
label $IF_FALSE5
push constant 0
return
	//     }
	// 
	//     /** Moves down by 2 pixels. */
	//     method void moveDown() {
	//         if ((y + size) < 254) {
function Square.moveDown 0 // Returns void
push argument 0
pop pointer 0
push this 1 // FIELD y
push this 2 // FIELD size
add
push constant 254
lt
	//             do Screen.setColor(false);
if-goto $IF_TRUE6
goto $IF_FALSE7
label $IF_TRUE6
push constant 0
call Screen.setColor 1
pop temp 0
	//             do Screen.drawRectangle(x, y, x + size, y + 1);
push this 0 // FIELD x
push this 1 // FIELD y
push this 0 // FIELD x
push this 2 // FIELD size
add
push this 1 // FIELD y
push constant 1
add
call Screen.drawRectangle 4
pop temp 0
	//             let y = y + 2;
push this 1 // FIELD y
push constant 2
add
pop this 1 // FIELD y
	//             do Screen.setColor(true);
push constant 0
not
call Screen.setColor 1
pop temp 0
	//             do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
push this 0 // FIELD x
push this 1 // FIELD y
push this 2 // FIELD size
add
push constant 1
sub
push this 0 // FIELD x
push this 2 // FIELD size
add
push this 1 // FIELD y
push this 2 // FIELD size
add
call Screen.drawRectangle 4
pop temp 0
	//         }
	//         return;
label $IF_FALSE7
push constant 0
return
	//     }
	// 
	//     /** Moves left by 2 pixels. */
	//     method void moveLeft() {
	//         if (x > 1) {
function Square.moveLeft 0 // Returns void
push argument 0
pop pointer 0
push this 0 // FIELD x
push constant 1
gt
	//             do Screen.setColor(false);
if-goto $IF_TRUE8
goto $IF_FALSE9
label $IF_TRUE8
push constant 0
call Screen.setColor 1
pop temp 0
	//             do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
push this 0 // FIELD x
push this 2 // FIELD size
add
push constant 1
sub
push this 1 // FIELD y
push this 0 // FIELD x
push this 2 // FIELD size
add
push this 1 // FIELD y
push this 2 // FIELD size
add
call Screen.drawRectangle 4
pop temp 0
	//             let x = x - 2;
push this 0 // FIELD x
push constant 2
sub
pop this 0 // FIELD x
	//             do Screen.setColor(true);
push constant 0
not
call Screen.setColor 1
pop temp 0
	//             do Screen.drawRectangle(x, y, x + 1, y + size);
push this 0 // FIELD x
push this 1 // FIELD y
push this 0 // FIELD x
push constant 1
add
push this 1 // FIELD y
push this 2 // FIELD size
add
call Screen.drawRectangle 4
pop temp 0
	//         }
	//         return;
label $IF_FALSE9
push constant 0
return
	//     }
	// 
	//     /** Moves right by 2 pixels. */
	//     method void moveRight() {
	//         if ((x + size) < 510) {
function Square.moveRight 0 // Returns void
push argument 0
pop pointer 0
push this 0 // FIELD x
push this 2 // FIELD size
add
push constant 510
lt
	//             do Screen.setColor(false);
if-goto $IF_TRUE10
goto $IF_FALSE11
label $IF_TRUE10
push constant 0
call Screen.setColor 1
pop temp 0
	//             do Screen.drawRectangle(x, y, x + 1, y + size);
push this 0 // FIELD x
push this 1 // FIELD y
push this 0 // FIELD x
push constant 1
add
push this 1 // FIELD y
push this 2 // FIELD size
add
call Screen.drawRectangle 4
pop temp 0
	//             let x = x + 2;
push this 0 // FIELD x
push constant 2
add
pop this 0 // FIELD x
	//             do Screen.setColor(true);
push constant 0
not
call Screen.setColor 1
pop temp 0
	//             do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
push this 0 // FIELD x
push this 2 // FIELD size
add
push constant 1
sub
push this 1 // FIELD y
push this 0 // FIELD x
push this 2 // FIELD size
add
push this 1 // FIELD y
push this 2 // FIELD size
add
call Screen.drawRectangle 4
pop temp 0
	//         }
	//         return;
label $IF_FALSE11
push constant 0
return
	//     }
	// }
