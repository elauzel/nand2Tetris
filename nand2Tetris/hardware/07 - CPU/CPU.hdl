/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=Ainstruction);	// A-instruction
    Not(in=Ainstruction, out=Cinstruction);		// C-instruction
    
    And(a=Cinstruction, b=instruction[5], out=ALUorInst);		// C-inst & destBitA
    Mux16(a=instruction, b=ALUout, sel=ALUorInst, out=AregIn);	// select (ALUout || instruction) based on (C-inst & destBitA)
    
    // A/M
    Or(a=Ainstruction, b=ALUorInst, out=Aload);		// A-inst || (C-inst & destBitA)
    ARegister(in=AregIn, load=Aload, out=Aout);		// load (A) if (A-inst || (C-inst & destBitA))
    
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);	// select (Aout || Min) based on (a-bit)

	// D
    And(a=Cinstruction, b=instruction[4], out=loadD);	// C-inst & destBitC
    DRegister(in=ALUout, load=loadD, out=Dout);			// load (D) if (C-inst & destBitC) else load (ALUout)
    
    // ALU inputs
    ALU(x=Dout, y=AMout, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, zr=ZRout, ng=NGout);	// calculate based on c-bits, d-bits, a-bit, i-bit
        
    // M
    Or16(a=false, b=Aout, out[0..14]=addressM);	// first 15-bits are memory address
    Or16(a=false, b=ALUout, out=outM);			// memory output = ALUout
    And(a=Cinstruction, b=instruction[3], out=writeM);		// if (C-inst & destBitM) write to memory
    
    // ALU outputs
    And(a=ZRout, b=instruction[1], out=jeq);    // ALUout == 0; jump
    And(a=NGout, b=instruction[2], out=jlt);    // ALUout < 0; jump
    Or(a=ZRout, b=NGout, out=negOrZero);		// ALUout <= 0
    Not(in=negOrZero, out=positive);            // ALUout > 0
    And(a=positive, b=instruction[0], out=jgt); // ALUout > 0; jump
    Or(a=jeq, b=jlt, out=jle);					// ALUout <= 0; jump

    Or(a=jle, b=jgt, out=Ajump);              	// jump to Address
    And(a=Cinstruction, b=Ajump, out=PCload); 	// if (C-inst & jump to address) load PCinput
    Not(in=PCload, out=PCinc);                  // else (incrememnt PC)

	// PC
    PC(in=Aout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}